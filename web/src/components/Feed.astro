---
interface Props {
  videoSrc?: string;
  cascadePath?: string;
}

const { videoSrc, cascadePath = "/cascades/" } = Astro.props;
---

<div class="video-container w-full h-screen flex justify-center items-center box-border px-4">
  <div
    class="feed-container w-full h-full absolute bg-black rounded-lg overflow-hidden flex justify-center items-center transition-all duration-300 hover:rounded-4xl hover:shadow-xl">
    <noscript>
      <p class="text-white">Please enable JavaScript to view the video feed.</p>
    </noscript>

    <div
      class="feed-error hidden absolute inset-0 justify-center items-center bg-black/70 text-white text-center z-10">
      <div class="p-4">
        <p class="error-title text-red-400 font-bold mb-1">Error loading video feed.</p>
        <p class="error-message text-sm" id="error-message"></p>
      </div>
    </div>

    <div
      class="feed-loading absolute inset-0 flex justify-center items-center bg-black/70 text-white text-center z-10">
      <p class="loading-message text-white p-1">[Loading video feed...]</p>
    </div>

    <canvas
      class="feed-overlay absolute inset-0 z-50 w-auto h-full bg-transparent pointer-events-none" style="top: 50%; left: 50%; transform: translate(-50%, -50%);"
      id="feed-overlay-canvas"></canvas>

    <video
      id="feed-video"
      class="feed-video w-auto h-full object-cover block"
      title="Your video feed"
      playsinline
      crossorigin="anonymous"
      autoplay
      muted></video>
  </div>
</div>

<script>
  declare const cv: any;

  declare global {
    interface Window {
      OPENCV_READY: boolean;
    }
  }

  import { HaarDetector } from "@/lib/haar-cascades";
  import { $PersonInFrame, $ImageData, $PersonResponse } from "@/stores/detector";

  let detector: HaarDetector | null = null;
  let animationFrameId: number = 0;
  const detectionConfidenceThreshold = 3;
  const noDetectionTolerance = 10;
  // State variables for persistence logic
  let consecutiveDetectionCount: number = 0;
  let consecutiveNoDetectionCount: number = 0;

  // Get cascade path from data attribute
  const cascadePath = document.currentScript?.getAttribute("data-cascade-path") || "/cascades/";

  document.addEventListener("DOMContentLoaded", async () => {
    const videoElement = document.getElementById("feed-video") as HTMLVideoElement | null;
    const canvasElement = document.getElementById(
      "feed-overlay-canvas",
    ) as HTMLCanvasElement | null;
    const ctx = canvasElement?.getContext("2d", { willReadFrequently: true });

    const feedLoading = document.querySelector(".feed-loading") as HTMLDivElement | null;
    const feedError = document.querySelector(".feed-error") as HTMLDivElement | null;
    const errorMessageElement = document.getElementById(
      "error-message",
    ) as HTMLParagraphElement | null;

    if (
      !videoElement ||
      !canvasElement ||
      !ctx ||
      !feedLoading ||
      !feedError ||
      !errorMessageElement
    ) {
      console.error("Required DOM elements not found");
      if (feedError && errorMessageElement) {
        feedLoading?.classList.add("hidden");
        feedError.classList.remove("hidden");
        errorMessageElement.textContent =
          "Initialization failed: Essential UI elements are missing.";
      }
      return;
    }

    function displayError(message: string): void {
      feedLoading?.classList.add("hidden");
      feedError?.classList.remove("hidden");
      if (errorMessageElement) {
        errorMessageElement.textContent = message;
      }
      videoElement?.classList.add("hidden");
    }

    async function playVideoAndPrepareCanvas(streamOrSrc?: MediaStream | string): Promise<void> {
      return new Promise((resolve, reject) => {
        const handleMetadataLoaded = async () => {
          canvasElement!.width = videoElement!.videoWidth;
          canvasElement!.height = videoElement!.videoHeight;

          feedLoading?.classList.add("hidden");
          videoElement!.classList.remove("hidden");

          try {
            await videoElement!.play();
            resolve();
          } catch (playError: unknown) {
            console.error("Error playing video:", playError);
            const errorMessage =
              playError instanceof DOMException ?
                `Could not play video: ${playError.message}. This might be due to autoplay policies.`
              : "Could not play video. Please check your browser settings.";
            displayError(errorMessage);
            reject(new Error(errorMessage));
          }
        };
        if (!videoElement) return;

        videoElement.onloadedmetadata = handleMetadataLoaded;
        videoElement.onerror = (event: Event | string) => {
          console.error("Video element error:", event);
          displayError("An error occurred with the video stream.");
          reject(new Error("Video element encountered an error."));
        };

        if (streamOrSrc instanceof MediaStream) {
          videoElement.srcObject = streamOrSrc;
        } else if (typeof streamOrSrc === "string") {
          videoElement.src = streamOrSrc;
          videoElement.load();
        }

        if (videoElement.readyState >= 2) {
          handleMetadataLoaded();
        }
      });
    }

    const startDetectionLoop = () => {
      const processFrame = () => {
        if (!videoElement.paused && !videoElement.ended && detector && ctx) {
          ctx.drawImage(videoElement, 0, 0, canvasElement!.width, canvasElement!.height);

          const detectedFaces = detector.detect(canvasElement, ctx, {});
          // A face is being detected
          // --- Persistence Logic for personInFrame ---
          if (detectedFaces.length > 0) {
            consecutiveDetectionCount++;
            consecutiveNoDetectionCount = 0; // Reset no detection counter

            if (
              consecutiveDetectionCount >= detectionConfidenceThreshold &&
              !$PersonInFrame.get()
            ) {
              console.log("personInFrame: true (confirmed)");
              // Set ImageData atom
              $ImageData.set(
                ctx.getImageData(
                  detectedFaces[0].rect.x,
                  detectedFaces[0].rect.y,
                  detectedFaces[0].rect.width,
                  detectedFaces[0].rect.height,
                ),
              );
              $PersonInFrame.set(true);
            }
          } else {
            consecutiveNoDetectionCount++;
            consecutiveDetectionCount = 0; // Reset detection counter

            if (consecutiveNoDetectionCount >= noDetectionTolerance && $PersonInFrame.get()) {
              $PersonInFrame.set(false);
              console.log("personInFrame: false (confirmed)");
            }
          }

          const personResponse = $PersonResponse.get();
          detectedFaces.slice(0, 1).forEach((face) => {
            ctx.strokeStyle = "red";
            ctx.lineWidth = 2;
            ctx.strokeRect(face.rect.x, face.rect.y, face.rect.width, face.rect.height);
            // Draw label and confidence if available from the store
            console.log(personResponse)
            if (personResponse && personResponse.label) {
              const labelText = `${personResponse.label} (${(personResponse.confidence * 100).toFixed(2)}%)`;
              ctx.fillStyle = "red"; // Text color
              ctx.font = "16px Arial"; // Font size and family
              ctx.textAlign = "left";

              // Draw text slightly above the bounding box
              ctx.fillText(
                labelText,
                face.rect.x,
                face.rect.y > 20 ? face.rect.y - 10 : face.rect.y + 20,
              );
            }
            // face.eyes.forEach((eye) => {
            //   ctx.strokeStyle = "blue";
            //   ctx.lineWidth = 1;
            //   ctx.strokeRect(eye.x, eye.y, eye.width, eye.height);
            // });
          });
        }
        animationFrameId = requestAnimationFrame(processFrame);
      };
      animationFrameId = requestAnimationFrame(processFrame);
    };

    try {
      // Get videoSrc from data attribute if needed
      const videoSrc = document.currentScript?.getAttribute("data-video-src");

      if (videoSrc) {
        console.log(`Loading video from source: ${videoSrc}`);
        await playVideoAndPrepareCanvas(videoSrc);
      } else {
        console.log("Attempting to get webcam stream...");
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
          throw new Error("Your browser does not support media devices (getUserMedia).");
        }
        const mediaStream: MediaStream = await navigator.mediaDevices.getUserMedia({
          audio: false,
          video: {
            facingMode: "user",
          },
        });
        await playVideoAndPrepareCanvas(mediaStream);
      }

      console.log("Initializing HaarDetector...");
      detector = new HaarDetector(cascadePath);
      const initialized = await detector.init();

      if (!initialized) {
        displayError(
          "Failed to initialize object detection. Check cascade files and OpenCV.js loading.",
        );
        return;
      }
      console.log("HaarDetector initialized successfully.");

      videoElement.onplay = () => {
        console.log("Video playing. Starting detection loop.");
        if (!animationFrameId) {
          startDetectionLoop();
        }
      };

      videoElement.onpause = () => {
        console.log("Video paused. Stopping detection loop.");
        if (animationFrameId) {
          cancelAnimationFrame(animationFrameId);
          animationFrameId = 0;
        }
      };

      videoElement.onended = () => {
        console.log("Video ended. Stopping detection loop.");
        if (animationFrameId) {
          cancelAnimationFrame(animationFrameId);
          animationFrameId = 0;
        }
      };

      if (!videoElement.paused && !videoElement.ended && videoElement.readyState >= 3) {
        startDetectionLoop();
      }

      feedLoading?.classList.add("hidden");
      videoElement.classList.remove("hidden");
      feedError?.classList.add("hidden");
    } catch (err: unknown) {
      console.error("Initialization error:", err);

      let userFacingMessage: string = "An unexpected error occurred during setup.";

      if (err instanceof DOMException) {
        switch (err.name) {
          case "NotAllowedError":
            userFacingMessage =
              "Camera access was denied. Please allow camera access in your browser settings.";
            break;
          case "NotFoundError":
          case "DevicesNotFoundError":
            userFacingMessage = "No camera found. Please ensure a camera is connected and enabled.";
            break;
          case "NotReadableError":
            userFacingMessage = "The camera is already in use or could not be accessed.";
            break;
          case "OverconstrainedError":
            userFacingMessage =
              "Camera constraints could not be satisfied. Trying with basic video access...";
            try {
              const basicMediaStream: MediaStream = await navigator.mediaDevices.getUserMedia({
                video: true,
              });
              await playVideoAndPrepareCanvas(basicMediaStream);
              detector = new HaarDetector(cascadePath);
              if (await detector.init()) {
                startDetectionLoop();
                return;
              }
            } catch (basicErr: unknown) {
              console.error("Basic getUserMedia attempt failed:", basicErr);
              userFacingMessage =
                "Could not access camera even with basic settings. Please check your system and browser permissions.";
            }
            break;
          case "AbortError":
            userFacingMessage = "Camera access was cancelled by the user.";
            break;
          case "SecurityError":
            userFacingMessage = "Camera access requires a secure connection (HTTPS).";
            break;
          default:
            userFacingMessage = `Camera error: ${err.name}.`;
            break;
        }
      } else if (err instanceof Error) {
        userFacingMessage = err.message;
      }

      displayError(userFacingMessage);
    }
  });

  // Cleanup on page unload
  window.addEventListener("beforeunload", () => {
    console.log("Page unloading. Cleaning up resources...");
    if (animationFrameId) {
      cancelAnimationFrame(animationFrameId);
      animationFrameId = 0;
    }

    if (detector) {
      detector.dispose();
      detector = null;
    }

    const videoElement = document.getElementById("feed-video") as HTMLVideoElement | null;
    if (videoElement && videoElement.srcObject instanceof MediaStream) {
      const stream = videoElement.srcObject;
      stream.getTracks().forEach((track) => track.stop());
      videoElement.srcObject = null;
    }
    console.log("Cleanup complete.");
  });
</script>

<script define:vars={{ videoSrc, cascadePath }}>
  // Pass props to the main script via data attributes
  if (document.currentScript) {
    if (videoSrc) {
      document.currentScript.setAttribute("data-video-src", videoSrc);
    }
    document.currentScript.setAttribute("data-cascade-path", cascadePath);
  }
</script>
